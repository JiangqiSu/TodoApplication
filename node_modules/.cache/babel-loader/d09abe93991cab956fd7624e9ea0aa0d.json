{"ast":null,"code":"import axios from \"axios\";\n\nclass AuthenticationService {\n  registerSuccessfulLogin(username, password) {\n    let basicAuthHeader = 'Basic ' + window.btoa(username + ':' + password);\n    console.log('success');\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(basicAuthHeader);\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"names":["axios","AuthenticationService","registerSuccessfulLogin","username","password","basicAuthHeader","window","btoa","console","log","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","config","headers","authorization"],"sources":["/Users/jiangqisu/Desktop/spring_project/my-app/src/components/todo/AuthenticationService.js"],"sourcesContent":["import axios from \"axios\";\n\nclass AuthenticationService {\n    registerSuccessfulLogin(username, password) {\n        let basicAuthHeader = 'Basic ' + window.btoa(username + ':' + password)\n        console.log('success')\n        sessionStorage.setItem('authenticatedUser', username);\n        this.setupAxiosInterceptors(basicAuthHeader);\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser')\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user === null) return false;\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user === null) return '';\n        return user\n    }\n\n    setupAxiosInterceptors(basicAuthHeader) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = basicAuthHeader\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;EACxBC,uBAAuB,CAACC,QAAD,EAAWC,QAAX,EAAqB;IACxC,IAAIC,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYJ,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC;IACAI,OAAO,CAACC,GAAR,CAAY,SAAZ;IACAC,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CR,QAA5C;IACA,KAAKS,sBAAL,CAA4BP,eAA5B;EACH;;EAEDQ,MAAM,GAAG;IACLH,cAAc,CAACI,UAAf,CAA0B,mBAA1B;EACH;;EAEDC,cAAc,GAAG;IACb,IAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;IACA,IAAGD,IAAI,KAAK,IAAZ,EAAkB,OAAO,KAAP;IAClB,OAAO,IAAP;EACH;;EAEDE,mBAAmB,GAAG;IAClB,IAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;IACA,IAAGD,IAAI,KAAK,IAAZ,EAAkB,OAAO,EAAP;IAClB,OAAOA,IAAP;EACH;;EAEDJ,sBAAsB,CAACP,eAAD,EAAkB;IACpCL,KAAK,CAACmB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;MACR,IAAI,KAAKP,cAAL,EAAJ,EAA2B;QACvBO,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BnB,eAA/B;MACH;;MACD,OAAOiB,MAAP;IACH,CANL;EAQH;;AAjCuB;;AAoC5B,eAAe,IAAIrB,qBAAJ,EAAf"},"metadata":{},"sourceType":"module"}